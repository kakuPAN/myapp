<div class="form-label">
  <% if  @frame_type.to_sym == :text %>
    <span>本文を追加</span>
  <% else @frame_type.to_sym == :image %>
    <span>画像を追加</span>
  <% end %>
</div>
<%= render "shared/error_messages", object: @frame %>
<div class="form-wrapper">
  <div class="form-container">
    <%= form_with model: [@board, @frame] do |f| %>
      <% if  @frame_type.to_sym == :text %>
        <div class="mb-3">
          <%= f.text_area :body, maxlength: 500, size: "10x5", class: "form-control", placeholder: "本文を入力してください", id: "frame_body", onkeyup: "ShowLength(value);" %>
          <p id="inputlength">0文字/250文字</p>
      </div>
      <% elsif @frame_type.to_sym == :image %>
        <div class="mb-3">
          <%= f.label :image, "画像" %>
          <%= f.file_field :image, onchange: "loadImage(this);" %>
        </div>
        <div class="preview-container">
          <div id="post_images" style="display: none;">
            <div id="preview"></div>
          </div>
        </div>
      <% end %>
      <div class="mb-3">
      <%= f.submit "作成", class: "form-control btn btn-outline-primary", id: "submit_button", disabled: @frame_type.to_sym == :text %>
      </div>
    <% end %>
  </div>
  <div class="cancel-button">
      <%= link_to "キャンセル", edit_board_path(@board),class: "cancel btn btn-outline-danger" %>
  </div>
</div>

<style>
* {
    /*outline: 2px solid blue;*/
    scrollbar-width: none;
  }
  .form-label {
    width: 100%;
    height: 100%;
    margin: 20px 0;
    text-align: center;
    background: rgba(221,221,221,0.4);
  }
  .form-label span {
    font-size: 30px;
    font-weight: bold;
    color: rgb(112, 112, 112);
  }
  .form-wrapper {
  display: flex;
  flex-direction: column; /* 縦並び */
  align-items: center;    /* 中央揃え */
  width: 100%;        /* 親要素の幅いっぱいを使用 */
  max-width: 700px;       /* 必要に応じて最大幅を制限 */
  margin: 0 auto;    /* 中央に配置 */
}

.form-container, .cancel-button {
  width: 100%;
  margin: auto;        /* 両コンテナの幅を揃える */
}
.form-container input, .cancel {
  font-size: 30px;
  padding: 10px 10px;
  border-radius: 20px;
  width: 50%;
  display: block;
  margin: auto;
}
#frame_image {
  display: block; /* ブロック要素として表示 */
  margin: 10px 0; /* 上下に余白を追加 */
  padding: 5px; /* 内側の余白を追加 */
  border: 1px solid #ccc; /* 薄いグレーの枠線 */
  border-radius: 4px; /* 角を丸くする */
  width: 100%; /* 幅を100%にしてコンテナにフィットさせる */
  cursor: pointer; /* マウスカーソルをポインターに変更 */
  font-size: 20px;
}
.form-container textarea {
  min-height: 300px;
  height: 100%;
  resize: none;
  background: rgba(221,221,221,0.4);
  font-size: 25px;
}

.cancel-button {
  margin-top: 20px;       /* フォームとの間隔を設定 */
  text-align: center;
  width: 50%; /* ボタンを中央揃え */
}

.cancel-button .cancel {
  display: block;         /* ボタンをブロック要素化して中央揃えを強制 */
  width: 100%; 
  text-decoration: none;           /* ボタン幅をフォームと揃える */
}

.preview-container {
  display: flex; /* フレックスボックスを使用 */
  justify-content: center; /* 水平方向に中央揃え */
  align-items: center; /* 垂直方向に中央揃え */
  width: 100%; /* コンテナの幅を全体に合わせる */
  height: 100%; /* 必要に応じて高さを指定 */
  border: 1px dashed #ccc; /* プレビューエリアの見た目を調整 */
  margin-top: 20px; /* フォームとの間隔を設定 */
  background-color: #f8f9fa; /* 見やすくするための背景色 */
  overflow: hidden;
}

#post_images {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

#post_images img {
  max-width: 100%; /* 画像が横方向に収まりきるように調整 */
  max-height: 100%; /* 画像が縦方向に収まりきるように調整 */
}
</style>

<script>
  console.log("読み込んだ");
  function loadImage(obj) {
  // プレビュー表示エリアを取得
  var allPreview = document.getElementById("post_images");
  
  // 既存のプレビューを削除
  var existingPreview = allPreview.querySelector("#preview");
  if (existingPreview) {
    existingPreview.remove();
  }

  // 新しいプレビュー用要素を作成
  var newPreview = document.createElement("div");
  newPreview.setAttribute("id", "preview");
  allPreview.style.display = "flex"; // プレビュー表示エリアを可視化
  allPreview.appendChild(newPreview);

  // ファイルの読み込みとプレビューの表示
  var fileReader = new FileReader();
  fileReader.onload = function (e) {
    var img = new Image();
    img.src = e.target.result;
    img.style.maxWidth = "500px"; // プレビュー画像のサイズ調整
    img.style.maxHeight = "500px";
    newPreview.appendChild(img);
  };

  // ファイルが選択されていれば処理を続行
  if (obj.files && obj.files[0]) {
    fileReader.readAsDataURL(obj.files[0]);
  }
}
</script>
<script>
  function ShowLength(str) {
    const maxLength = 500;
    const value = str.trim()
    const inputLength = str.trim().length;
    const submitButton = document.getElementById("submit_button");

    // 文字数を表示
    document.getElementById("inputlength").innerHTML = `${inputLength}/${maxLength}文字`;

    // ボタンの有効/無効を切り替え
    if (value === "") {
        submitButton.disabled = true; // 入力が空の場合はボタンを無効化
    } else {
        submitButton.disabled = false; // 入力がある場合はボタンを有効化
    }
}
</script>

